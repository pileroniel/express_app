###Steps taken in building app
Without using express generator, we first npm init this
project and install express and nodemon

npm install express nodemon

Nodemon- a tool to automatically restart our server when a change is made to your project. We don't have to stop and start our server everytime a change is made to our program

We install babel javascript compiler dev dependencies to ensure our project will be compatible with ES6

--save-dev is used when installing dev dependecies

npm install --save-dev @babel/core @babel/cli

Four packages used from babel here are core, node, preset-env, cli

Create cogif file for babel to indicate the presets we have installed
touch .babelrc 

In our package.json file we add "type":"module" to enable modules to be used in your project

In the scripts section we configure how our start script works. 
"start":"nodemon --experimental-json-modules --exec babel-node index.js"
The flag --experimental-json-modules allows us to run the script using a json module(since we changed the type element above to type module)
The last three commands tell the program to run at entry point index js, using the node package from babel


## Express Routing Fundamentals
CRUD Operations
Create - POST
Read - GET
Update - PUT
Delete - DELETE

### Routing Parameters
req.params sends us the parameters and arguments specified by the url request using the syntax /path/:reqParam/

We can chain callback functions using the next() function

### Middleware functions
- built in functions include
    - express.static
    - express.json - it parses json encoded data 
        {'name':'Ron Pile', title:'student', age:19}
    - express.urlencoded - parses url encode data i.e 
        name=Ron + Pile& title=student&age=19

- Utilize middleware functions for error handling.

Setting up a custom err handler is important to avoid the user fromm
getting sercer errors 

Third party middlewares - https://expressjs.com/en/resources/middleware.html

### Debug Mode
Logging in information about route matches, middleware functions in use, 
application mdoe and the flow of the req-res cycle

set DEBUG=express:* & node index.js

since in this project we're using es6 and also json modules, we add
the flag --experimental-json-modules after the asterisk, i.e

set DEBUG=express:* & node --experimental-json-modules index.js

You can add this to the package.json file as a script,adding to it
the start script code so that it debugs and starts with all the functions of start

### Security Best Practices

- Use the most up to date version of express and dependencies
- Use TLS encryption (Transport Layer Security)- communication over the internet. Let's Encrypt!!!
- Use Helmet (set http headers appropriately and securely)
- Use Cookies securely
- Prevent brute-force attacks against authorization (rate-limiter-flexible package)
- Ensure dev dependencies are secure using npm audit
